<controls:MetroWindow x:Class="MarkdownMonster.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MarkdownMonster"
		xmlns:localwindows="clr-namespace:MarkdownMonster.Windows"
        xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:fa="http://schemas.fontawesome.io/icons/"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:dragablz="http://dragablz.net/winfx/xaml/dragablz"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        xmlns:mmcontrols="clr-namespace:MarkdownMonster.Controls"
        mc:Ignorable="d"					  
        
        Name="MainApplicationWindow"                      
        Title="Markdown Monster" TitleCharacterCasing="Normal"
        Icon="Assets\MarkdownMonster_Icon_256.png"
        BorderThickness="0"
        GlowBrush="Black"                           
        ResizeMode="CanResizeWithGrip"		
        Height="600" Width="1000"  
        MinWidth="390" MinHeight="220" 
        WindowTransitionsEnabled="False">

    <Window.Resources>
        <localwindows:InvertedBooleanConverter x:Key="InvertedBooleanConverter" />
        <localwindows:NotEmptyStringToBooleanConverter x:Key="NotEmptyStringToBooleanConverter" />

        <ObjectDataProvider x:Key="ApplicationThemeEnums" 
                            MethodName="GetValues" ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="local:Themes"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        
    </Window.Resources>
    <Window.ContextMenu>
        <ContextMenu Name="EditorContextMenu" MinWidth="175">
        </ContextMenu>
    </Window.ContextMenu>

    <controls:MetroWindow.LeftWindowCommands>
        <controls:WindowCommands>
         
        </controls:WindowCommands>
    </controls:MetroWindow.LeftWindowCommands>

    <controls:MetroWindow.RightWindowCommands>
        <controls:WindowCommands>
            <StackPanel Orientation="Horizontal">

                <Button Name="ToolButtonAppTheme"  Foreground="{StaticResource BlueItem}"                                                              
                        ToolTip="Switch Application Theme"
                        Content="{Binding Configuration.ApplicationTheme}"
                        TextElement.FontSize="13" FontWeight="DemiBold">
                </Button>
                <Button 
                        Margin="-10,0,0,0"
                        ToolTip="Switch Application Theme"                               
				        fa:Awesome.Content="CaretDown" Foreground="{StaticResource BlueItem}"				                             
				        TextElement.FontSize="12" 
				        TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
				>
                    <i:Interaction.Behaviors>
                        <local:DropDownButtonBehavior />
                    </i:Interaction.Behaviors>
                    <Button.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Dark" 
                                      Command="{Binding Commands.SwitchThemeCommand}"
                                      CommandParameter="Dark"                                      
                                      />
                            <MenuItem Header="Light" 
                                      Command="{Binding Commands.SwitchThemeCommand}"
                                      CommandParameter="Light" />
                            <!--<Separator/>
                            <MenuItem Header="Default" Click="AppTheme_MenuButtonClick" />-->
                        </ContextMenu>
                    </Button.ContextMenu>

                </Button>



                <ToggleButton
                    fa:Awesome.Content="Check"  Foreground="{StaticResource BlueItem}"                                                                
                    IsChecked="{Binding Configuration.Editor.EnableSpellcheck}"
                    ToolTip="enable/disable spell-checking"
                    Command="{Binding Commands.SpellCheckCommand}"                          
                    TextElement.FontSize="16"
                    TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                >
                    <StackPanel Orientation="Horizontal">
                        <fa:FontAwesome   Icon="Check"  
                                          FontSize="19"
                                          FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" Foreground="{StaticResource BlueItem}"    />
                        <TextBlock Margin="1,5,0,0" FontSize="11" 
                                   Text="{Binding Configuration.Editor.Dictionary}" />
                    </StackPanel>
                    
                </ToggleButton>

                <Button 
                        Name="ButtonLanguages"
                        Margin="-12,0,0,0"
                        FontSize="11"
						ToolTip="Languages"                                
				        fa:Awesome.Content="CaretDown" Foreground="{StaticResource BlueItem}"				                             
				        Click="ButtonLangugeDropDown_Click"
				        TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
				>
                    <i:Interaction.Behaviors>
                        <local:DropDownButtonBehavior  />
                    </i:Interaction.Behaviors>
                </Button>

                <ToggleButton Name="ToolButtonPreview"  Foreground="{StaticResource BlueItem}"                                                              
                              Margin="-5,0,0,0"
                                IsChecked="{Binding IsPreviewBrowserVisible}"
                                Command="{Binding Commands.TogglePreviewBrowserCommand}"                                  
                                ToolTip="open/hide the HTML Preview Pane (F12)"
                                fa:Awesome.Content="Globe"
                                TextElement.FontSize="16"                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome">
                </ToggleButton>

                <Button 
                        Margin="-10,0,0,0"
						ToolTip="Preview Modes"                                
				        fa:Awesome.Content="CaretDown" Foreground="{StaticResource BlueItem}"				                             
				        TextElement.FontSize="12" 
				        TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
				>
                    <i:Interaction.Behaviors>
                        <local:DropDownButtonBehavior />
                    </i:Interaction.Behaviors>
                    <Button.ContextMenu>
                        <ContextMenu>

                            <MenuItem Header="Toggle _Preview Window"
                                      IsCheckable="True" 
                                      InputGestureText="F12"
                                      IsChecked="{Binding IsPreviewBrowserVisible}"
                                      Command="{Binding Commands.TogglePreviewBrowserCommand}"
                                      IsEnabled="{Binding IsEditorActive}">
                            </MenuItem>
                            <MenuItem Header="View in Web _Browser" 
                                      Command="{Binding Commands.ViewInExternalBrowserCommand}"
                                      InputGestureText="Shift+F12"
                                      IsEnabled="{Binding IsEditorActive}" />
                            <Separator/>
                            <MenuItem Header="Internal Preview" CommandParameter="InternalPreview" Command="{Binding Commands.PreviewModesCommand}"
                                      IsCheckable="True" IsChecked="{Binding IsInternalPreview}"/>
                            <MenuItem CommandParameter="ExternalPreviewWindow" 
                                      Header="External Preview Window"  Command="{Binding Commands.PreviewModesCommand}"
                                      IsCheckable="True" IsChecked="{Binding IsExternalPreview}"/>
                        </ContextMenu>
                    </Button.ContextMenu>

                </Button>

                <ToggleButton Name="ToolButtonFullScreen"   Foreground="{StaticResource BlueItem}"				              
                              Margin="-4,0,0,0"
                                      IsChecked="{Binding IsFullScreen}"
                                      Command="{Binding Commands.DistractionFreeModeCommand}"                                                 
                                      ToolTip="toggle distraction free edit mode (Alt+Shift+Enter). configure with: 'DistractionFreeModeHideOptions' setting."
                                 fa:Awesome.Content="ArrowsAlt"                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"      
                                      />
                <ToggleButton Name="ToolButtonPresentationMode"   Foreground="{StaticResource BlueItem}"                              
                                      IsChecked="{Binding IsPresentationMode}"
                                      Command="{Binding Commands.PresentationModeCommand}"                                                 
                                      ToolTip="toggle presentation mode (F11)"
                                 fa:Awesome.Content="Desktop"                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"      
                                      />

               

                <Button Name="ToolButtonSettings" Foreground="{StaticResource BlueItem}" 
                        Command="{Binding Commands.SettingsVisualCommand}"
                        fa:Awesome.Content="Gear" 
                        ToolTip="Configuration Settings for Markdown Monster"                        
                        TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"  />

                <Button 
                    Margin="-4,0,0,0" Name="ButtonWindowSizes"
                    Click="ButtonWindowSizesDropdown_Click"
                    fa:Awesome.Content="CaretDown"
                    FontSize="12"
                    Foreground="{StaticResource BlueItem}"				                             
                    TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                >
                    <i:Interaction.Behaviors>
                        <local:DropDownButtonBehavior />
                    </i:Interaction.Behaviors>
                    <Button.ToolTip>
                        <ToolTip>
                        <TextBlock>Resize main window to a pre-configured size.
                            <LineBreak/>
                            You can configure custom sizes in the configuration file.
                        </TextBlock>
                        </ToolTip>
                    </Button.ToolTip>
                </Button>

            </StackPanel>
        </controls:WindowCommands>
    </controls:MetroWindow.RightWindowCommands>

    <Grid Name="WindowGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"  Name="MainMenuGridRow"/>
            <RowDefinition Height="Auto" Name="ToolbarGridRow"/>
            <RowDefinition Height="*" Name="MainContentGridRow" />
            <RowDefinition Height="Auto" Name="ContentConsoleSplitterGridRow"/>
            <RowDefinition Height="Auto" Name="ConsolePanelGridRow" />
            <RowDefinition Height="30" Name="StatusBarGridRow"/>
        </Grid.RowDefinitions>


        <Menu Name="MainMenu" x:FieldModifier="public" Grid.Row="0" 
              Margin="0"
              HorizontalAlignment="Stretch">
            <MenuItem Header="_File" Name="MainMenuFile" x:FieldModifier="public" >
                <MenuItem Name="ButtonNewFile" Header="_New" Command="{Binding Commands.NewDocumentCommand}" InputGestureText="{Binding Commands.NewDocumentCommand.KeyboardShortcut}"/>
                <MenuItem Name="ButtonNewWeblogPost" Header="New Weblog Post" Command="{Binding Commands.NewWeblogPostCommand}" />
                <Separator/>
                <MenuItem Name="ButtonOpenFile" Header="_Open" Command="{Binding Commands.OpenDocumentCommand}"  InputGestureText="{Binding Commands.OpenDocumentCommand.KeyboardShortcut}"/>

                <MenuItem Header="Open _From">
                    <MenuItem Name="ButtonOpenFromUrl" Header="Open from _Url" Command="{Binding Commands.OpenFromUrlCommand}" />
                    <MenuItem Name="ButtonOpenFromHtml" Header="Open from _Html" Click="Button_Handler" ToolTip="Attempts to open an Html document as Markdown text."/>
                    <Separator />
                    <MenuItem  Header="Clone _Git Repository" Command="{Binding Commands.Git.OpenFromGitRepoCommand}" />
                </MenuItem>

                <MenuItem Name="ButtonRecentFiles" Header="_Recent Documents"
                          SubmenuOpened="ButtonRecentFiles_SubmenuOpened"  >
                    <MenuItem>.</MenuItem>
                </MenuItem>
               
                <Separator/>

                <MenuItem Name="ButtonSaveFile" Header="_Save" Command="{Binding Commands.SaveCommand}"  
                          InputGestureText="{Binding Commands.SaveCommand.KeyboardShortcut}" />
                <MenuItem Name="ButtonSaveAsFile" Header="Save _As " Command="{Binding Commands.SaveAsCommand}"  
                          InputGestureText="{Binding Commands.SaveAsCommand.KeyboardShortcut}"/>
                <MenuItem Name="ButtonSaveAll" Header="Save A_ll " Command="{Binding Commands.SaveAllCommand}"  
                          InputGestureText="{Binding Commands.SaveAllCommand.KeyboardShortcut}" />

                <MenuItem Header="Save _To">
                    <MenuItem Name="ButtonSaveAsHtml" Header="Save to _Html" Command="{Binding Commands.SaveAsHtmlCommand}" />
                    <MenuItem x:Name="ButtonGeneratePdf" Header="Save to _PDF" Command="{Binding Commands.GeneratePdfCommand}" />
                    <Separator/>
                    <MenuItem Name="ButtonSaveAsSecureFile" Header="Save as _Encrypted File" Command="{Binding Commands.SaveAsCommand}" CommandParameter="Secure"  />
                </MenuItem>

                <Separator/>

                <MenuItem Header="Pro_ject">
                    <MenuItem Name="ButtonLoadProject" 
                              Header="_Load Project" 
                              Command="{Binding Commands.LoadProjectCommand}" />
                    <MenuItem Name="ButtonSaveProject" 
                              Header="{Binding ActiveProject.SaveProjectFilename}" 
                              Command="{Binding Commands.SaveProjectCommand}" 
                              CommandParameter="{Binding ActiveProject.Filename}" 
                              IsEnabled="{Binding ActiveProject.IsEmpty,Converter={StaticResource InvertedBooleanConverter}}" />
                    <MenuItem Name="ButtonSaveAsProject" 
                              Header="Save Project _As"
                              Command="{Binding Commands.SaveProjectCommand}" />
                    <Separator />
                    <MenuItem Name="ButtonCloseProject" Header="_Close Project" 
                              Command="{Binding Commands.CloseProjectCommand}" />
                </MenuItem>

                <Separator/>

                <MenuItem Header="_Git">
                    <MenuItem Header="_Commit to Git..." Command="{Binding Commands.Git.CommitToGitCommand}" InputGestureText="{Binding Commands.Git.CommitToGitCommand.KeyboardShortcut}" />
                    <Separator />
                    <MenuItem Header="Clone _Git Repository" Command="{Binding Commands.Git.OpenFromGitRepoCommand}" />
                    <MenuItem Header="_Create Git Repository" Command="{Binding Commands.Git.OpenFromGitRepoCommand}" CommandParameter="Create" />
                    <MenuItem Header="_Attach to Remote Git Repository" Command="{Binding Commands.Git.OpenFromGitRepoCommand}" CommandParameter="AddRemote" />
                    <Separator />
                    <MenuItem Header="Open Folder in Git Client"
                              Command="{Binding Commands.Git.OpenGitClientCommand}"  
                              IsEnabled="{Binding Configuration.GitClientExecutable, Converter={StaticResource NotEmptyStringToBooleanConverter}}" />
                </MenuItem>

                <Separator/>
                
                <MenuItem Header="View in Web _Browser" Name="ButtonViewInWebBrowser"                          
                          Command="{Binding Commands.ViewInExternalBrowserCommand}"
                          InputGestureText="Shift+F12"
                          IsEnabled="{Binding IsEditorActive}" />
				<MenuItem Name="ButtonPrintPreview" Header="_Print Output" Command="{Binding Commands.PrintPreviewCommand}"
				          InputGestureText="{Binding Commands.PrintPreviewCommand.KeyboardShortcut}"/>
                <Separator />
                <MenuItem Header="_Close Document" Command="{Binding Commands.CloseActiveDocumentCommand}" 
                          InputGestureText="{Binding Commands.CloseActiveDocumentCommand.KeyboardShortcut}"/>
                <MenuItem Header="Close _All Documents" Command="{Binding Commands.CloseAllDocumentsCommand}"  
                          IsEnabled="{Binding IsEditorActive}"/>

                <Separator />
                <MenuItem Name="ButtonExit" Header="E_xit" Click="Button_Handler"/>
            </MenuItem>
            <MenuItem Header="_Edit" Name="MainMenuEdit">
                <MenuItem Header="Paste Html as Markdown" IsEnabled="{Binding IsEditorActive}" 
                          Command="{Binding Commands.PasteMarkdownFromHtmlCommand}"
                          ToolTip="Pastes HTML from your clipboard as Markdown text" 
                          InputGestureText="{Binding Commands.PasteMarkdownFromHtmlCommand.KeyboardShortcut}" 
                          />
                <MenuItem Header="Copy Markdown Selection as Html" IsEnabled="{Binding IsEditorActive}"                          
                          Command="{Binding Commands.CopyAsHtmlCommand}" 
                          ToolTip="Copies the selected markdown from the editor as HTML to the clipboard"
                          InputGestureText="{Binding Commands.CopyAsHtmlCommand.KeyboardShortcut}"  />
                <MenuItem Header="Remove Markdown _Formatting" IsEnabled="{Binding IsEditorActive}" 
                          Command="{Binding Commands.RemoveMarkdownFormattingCommand}"
                          ToolTip="Removes Markdown formatting from a selection." 
                          InputGestureText="{Binding Commands.RemoveMarkdownFormattingCommand.KeyboardShortcut}" />
                
                <MenuItem Header="Spea_k">
                    <MenuItem Header="Speak _Selection"  
                              Command="{Binding Commands.Speech.SpeakSelectionCommand}"
                              ToolTip="Speaks the current editor selection using your default audio device." />
                    <MenuItem Header="Speak _Document"  
                              Command="{Binding Commands.Speech.SpeakDocumentCommand}"
                              ToolTip="Speaks the entire document in the editor." />
                    <MenuItem Header="Speak Text from _Clipboard"  
                              Command="{Binding Commands.Speech.SpeakFromClipboardCommand}"
                              ToolTip="Speaks the entire document in the editor." />
                    <Separator />
                    <MenuItem Header="Sto_p Speaking"  
                              Command="{Binding Commands.Speech.CancelSpeakCommand}"
                              ToolTip="Stops any active speaking operation." />
                </MenuItem>
                
                <Separator />
                
                <MenuItem Name="Button_Spellcheck" Header="Toggle _Spellchecking" Command="{Binding Commands.SpellCheckCommand}"  
                          IsCheckable="True"                          
                          IsChecked="{Binding Configuration.Editor.EnableSpellcheck}"/>
                <MenuItem Header="Next Spellcheck Error" Command="{Binding Commands.SpellCheckNextCommand}" InputGestureText="F7" />
                <MenuItem Header="Previous Spellcheck Error" Command="{Binding Commands.SpellCheckPreviousCommand}" InputGestureText="Shift-F7" />
                <Separator />
                    <MenuItem Name="ButtonAutoSaveDocuments" 
                          Header="Auto Save Document"                          
                          IsCheckable="True"
                          IsEnabled="{Binding IsEditorActive}"
                          IsChecked="{Binding ActiveDocument.AutoSaveDocument}" />
                <MenuItem Name="ButtonAutoBackupDocument"
                          Header="Auto Backup Document"                          
                          IsCheckable="True"
                          IsEnabled="{Binding IsEditorActive}"
                          IsChecked="{Binding ActiveDocument.AutoSaveBackup}" />
                <Separator />
                <MenuItem Name="ButtonAllowScriptTags" 
                          Header="Allow Script in Markdown"                          
                          IsCheckable="True"
                          IsChecked="{Binding Configuration.MarkdownOptions.AllowRenderScriptTags}" />

                <MenuItem Name="ButtonUseReferenceLinks" 
                          Header="Use Link References"                          
                          IsCheckable="True"
                          IsChecked="{Binding Configuration.UseReferenceLinks}" />

                
                <!--<MenuItem Name="Button_MarkdownLinting" Header="Markdown Linting"  Command="{Binding Commands.MarkdownLintingCommand}"  />-->
                <Separator/>
                <MenuItem Header="Find in Document" 
                          Name="Button_Find"
                          IsEnabled="{Binding IsEditorActive}"                          
                          ToolTip="Find text in the active document" 
                          Click="Button_Handler"
                          InputGestureText="Ctrl+F" />
                <MenuItem Header="Find next occurrence"
                          Name="Button_FindNext"
                          IsEnabled="{Binding IsEditorActive}"
                          ToolTip="Find the next occurrence of the searched text in the active document"
                          Click="Button_Handler"
                          InputGestureText="F3" />
                <MenuItem Header="Find and Replace in Document" 
                          Name="Button_Replace"
                          IsEnabled="{Binding IsEditorActive}"
                          ToolTip="Find text in the active document" 
                          Click="Button_Handler"
                          InputGestureText="Ctrl+H" />
                <MenuItem Header="Find in Files" 
                          Command="{Binding Commands.OpenSearchSidebarCommand}"
                />
            </MenuItem>
            <MenuItem Header="_Tools" Name="MainMenuTools" x:FieldModifier="public">                 
                <MenuItem Name="MenuAddinManager" Header="_Add-in Manager" Command="{Binding Commands.AddinManagerCommand}"/>
                <MenuItem Name="MenuAddins" Header="Add-ins" />
                <Separator/>
                <MenuItem Name="MenuOpenConfigFolder" Header="Open Configuration Folder" Click="Button_Handler" />
                <MenuItem Name="MenuOpenPreviewFolder" Header="Open Preview Themes Folder" Click="Button_Handler"/>
                <Separator/>
                <MenuItem Name="MenuOpenInCommandWindow" Header="Open _Terminal"
                          Command="{Binding Commands.CommandWindowCommand}"
                          IsEnabled="{Binding IsEditorActive}" />
                <MenuItem Name="MenuOpenInFolder" Header="Open in E_xplorer" 
                         Command="{Binding Commands.OpenInExplorerCommand}" 
                        IsEnabled="{Binding IsEditorActive}" 
                        ToolTip="Open the document's folder in Explorer" />
                <Separator/>
                <MenuItem Name="MenuCommitToGit" Header="Commit to _Git..." Command="{Binding Commands.Git.CommitToGitCommand}" IsEnabled="{Binding IsEditorActive}" 
                          ToolTip="Commits the open document to Git and tries to push to the active remote branch." />
                <MenuItem Name="MenuCopyFoldername" Header="Copy Full Path" 
                          ToolTip="Copy the document's full path to the Clipboard" 
                          Command="{Binding Commands.CopyFullPathToClipboardCommand}"
                          IsEnabled="{Binding IsEditorActive}" />

                <Separator/>
                

                <MenuItem Header="_Settings" Command="{Binding Commands.SettingsVisualCommand}"/>
            </MenuItem>
            <MenuItem Header="_View" Name="MainMenuView"  x:FieldModifier="public" >
                <MenuItem Name="ButtonHtmlPreview" 
                          Header="Toggle _Preview Window"
                          IsCheckable="True" 
                          InputGestureText="F12"
                          IsChecked="{Binding IsPreviewBrowserVisible}"
                          Command="{Binding Commands.TogglePreviewBrowserCommand}"
                          IsEnabled="{Binding IsEditorActive}">
                </MenuItem>
                <MenuItem Header="Internal Preview" IsCheckable="True" IsChecked="{Binding IsInternalPreview}"  Command="{Binding Commands.PreviewModesCommand}" CommandParameter="InternalPreview"/>
                <MenuItem Header="External Preview" IsCheckable="True" IsChecked="{Binding IsExternalPreview}" Command="{Binding Commands.PreviewModesCommand}" CommandParameter="ExternalPreviewWindow"/>
                
                <Separator/>

                <MenuItem Header="View in Web _Browser" 
                          Command="{Binding Commands.ViewInExternalBrowserCommand}"
                          InputGestureText="Shift+F12"
                          IsEnabled="{Binding IsEditorActive}" />

                <!--  I don't know at which Position you like this. So feel free to move these  -->
                <MenuItem Header="Disable automatic script refresh"
                          IsCheckable="True"
                          IsChecked="{Binding IsAutorefreshScriptsDisabled}" />
                          Command="{Binding Commands.ViewInExternalBrowserCommand}"
                          InputGestureText="Shift+F12"
                          IsEnabled="{Binding IsEditorActive}" />
                <MenuItem Name="ButtonPrintPreview2" Header="Print Html Preview" Command="{Binding Commands.PrintPreviewCommand}" InputGestureText="{Binding Commands.PrintPreviewCommand.KeyboardShortcut}" />
                <Separator/>
	            <!--<MenuItem Name="ButtonToggleFolderBrowser" 
	                      Header="Toggle _Folder Browser Panel"                         
	                      Command="{Binding Commands.ToggleFolderBrowserCommand}"
	                      InputGestureText="Alt+V-F"
	                      ToolTip="Toggles the Folder Browser sidebar panel"
	                      />-->
                <MenuItem Name="ButtonToggleLeftSidebar" 
                          Header="Toggle Side_bar"                         
                          Command="{Binding Commands.ToggleLeftSidebarPanelCommand}"
                          InputGestureText="{Binding Commands.ToggleLeftSidebarPanelCommand.KeyboardShortcut}"
                          ToolTip="Toggles the left sidebar panel" 
                />


                <MenuItem Name="ButtonShowFolderBrowser" 
                          Header="Activate _Folder Browser"                                                                                                                       
                          Command="{Binding Commands.ShowSidebarTabCommand}" CommandParameter="FolderBrowser" InputGestureText="Alt-V-F"/>
                <MenuItem Name="ButtonShowDocumentOutline" 
                          Header="Activate Markdown Document _Outline"                                                                                                                       
                          Command="{Binding Commands.ShowSidebarTabCommand}" CommandParameter="DocumentOutline" InputGestureText="Alt-V-O"/>


                <MenuItem Name="ButtonShowFavorites"  x:FieldModifier="public"
                          Header="Activate Fa_vorites"                                                                                                                       
                          Command="{Binding Commands.ShowSidebarTabCommand}" 
                          CommandParameter="Favorites" InputGestureText="Alt-V-V"/>


                <MenuItem Name="ButtonToggleConsolePanel" 
                          Header="Toggle _Console Output Panel"                         
                          Command="{Binding Commands.ToggleConsolePanelCommand}"
                          ToolTip="Toggles the Console Window on the bottom of the Window" 
                />

                <Separator />


                <MenuItem Name="ButtonDistractionFreeMode" 
                          Header="Toggle Distraction Free Mode"                         
                          Command="{Binding Commands.DistractionFreeModeCommand}"
                          ToolTip="Displays the editor in full screen mode"
                          IsCheckable="True"
                          IsChecked="{Binding IsFullScreen}"
                          InputGestureText="Alt+Shift+Enter" 
                          IsEnabled="{Binding IsEditorActive}" />
                <MenuItem Name="ButtonPresentationMode"
                          Header="Toggle Presentation Mode"                         
                          ToolTip="Displays the preview in full screen mode"
                          Command="{Binding Commands.PresentationModeCommand}"
                          IsCheckable="True"
                          IsChecked="{Binding IsPresentationMode}"
                          InputGestureText="F11" 
                          IsEnabled="{Binding IsEditorActive}" />
                <Separator />
                

                <MenuItem Name="ButtonWordWrap" 
                          Header="Toggle _Word Wrap"      
                          Command="{Binding Commands.WordWrapCommand}"                                                                                             
                          IsCheckable="True"
                          InputGestureText="{Binding Commands.WordWrapCommand.KeyboardShortcut}"
                          IsChecked="{Binding Configuration.Editor.WrapText, Mode=OneWay}" />

                <MenuItem Name="ButtonLineNumbers" 
                          Header="Toggle Line _Numbers"                         
                          Click="Button_Handler"
                          IsCheckable="True"
                          IsChecked="{Binding Configuration.Editor.ShowLineNumbers}" />

                <MenuItem Name="ButtonShowInvisibles" 
                          Header="Toggle Invisible Characters"
                          Click="Button_Handler"
                          IsCheckable="True"
                          IsChecked="{Binding Configuration.Editor.ShowInvisibles}" />

                <Separator />

                <MenuItem Name="ButtonCenteredView" 
                          Click="Button_Handler"
                          IsCheckable="True"
                          IsChecked="{Binding Configuration.Editor.CenteredMode}"
                           >
                    <MenuItem.Header>
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                            <TextBlock>Toggle Centered Layout at</TextBlock>
                            <TextBox Text="{Binding Configuration.Editor.CenteredModeMaxWidth}" 
                                     Padding="0,-2" Margin="4,-1,1,0" 
                                     Background="#222"
                                     BorderThickness="0" FontSize="13"
                                     Height="22" MinHeight="22" 
                                     LostFocus="Refresh_Styling">
                            </TextBox>
                            <TextBlock>px</TextBlock>
                        </StackPanel>
                    </MenuItem.Header>
                </MenuItem>

                <MenuItem Header="_Split Editor">
                    <MenuItem Header="_Single Pane" Command="{Binding Commands.EditorSplitModeCommand}" CommandParameter="None" />
                    <Separator/>
                    <MenuItem Header="_Below" Command="{Binding Commands.EditorSplitModeCommand}" CommandParameter="Below" />
                    <MenuItem Header="Besi_de" Command="{Binding Commands.EditorSplitModeCommand}" CommandParameter="Beside" />
                </MenuItem>

            </MenuItem>

            <!-- generated dynamically by command -->
            <MenuItem Name="MainMenuWindow" Header="_Window"                       
                      SubmenuOpened="MainMenuWindow_SubmenuOpened"
                      >
                <MenuItem></MenuItem>
            </MenuItem>


            <MenuItem Header="_Help" Name="MainMenuHelp">
                <MenuItem Name="MenuDocumentation" Header="Documentation" Command="{Binding Commands.HelpCommand}" InputGestureText="{Binding Commands.HelpCommand.KeyboardShortcut}" />
                <MenuItem Name="MenuMarkdownBasics" Header="Markdown Basics"   Click="Button_Handler"/>
                <MenuItem Name="MenuCreateAddinDocumentation" Header="Documentation for Creating Addins"   Click="Button_Handler"/>
                <MenuItem Name="MenuShowSampleDocument" Header="Show Markdown Feature Sample Document"   Click="Button_Handler"/>
                <Separator />
                <MenuItem Name="MenuMarkdownMonsterSite" Header="Markdown Monster Web Site"   Click="Button_Handler"/>
                <MenuItem Name="MenuBugReport" Header="Report a Bug or Make a Suggestion" Click="Button_Handler"/>
                <Separator />
                <MenuItem Name="MenuCheckNewVersion" Header="Check for New Version" Click="Button_Handler"/>
                <MenuItem Name="MenuRegister" Header="Software Registration" Click="Button_Handler"/>
                <Separator  />
                <MenuItem Name="MenuShowErrorLog" Header="Show Error Log" Click="Button_Handler"/>
                <MenuItem Name="MenuResetConfiguration" Header="Reset Settings to Default" Click="Button_Handler"/>
                <MenuItem Name="MenuBackupConfiguration" Header="Backup Configuration Settings" Click="Button_Handler"/>
                <Separator  />
                <MenuItem Name="ButtonAbout" Header="_About" Click="Button_Handler"/>

                <MenuItem Name="ButtonTest" Header="Test" Command="{Binding Commands.TestButtonCommand}" controls:VisibilityHelper.IsVisible="{Binding IsDebugMode}"/>
            </MenuItem>
        </Menu>

        
        
        <StackPanel Grid.Row="1">
			<ToolBarPanel Name="ToolbarPanelMain" >
                <StackPanel Orientation="Horizontal">
                    <ToolBar Name="ToolbarFile"  FontSize="17">
						<Button Name="ToolButtonOpenFile" Margin="5,0,0,0"  Command="{Binding Commands.OpenDocumentCommand}" ToolTip="Open Markdown file (Ctrl+O)"                                
                                fa:Awesome.Content="FolderOpen"                                 
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                                />
                        <Button Name="ToolbarButtonRecentFiles" Margin="-2,0" Click="Button_Handler" 
                                        ToolTip="Recent documents (Alt+F+R)"
                                        fa:Awesome.Content="CaretDown"
                                        Width="15" 
                                        TextElement.FontSize="11"
                                        TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome">
                        </Button>


						<Button Name="ToolButtonNewFile" Margin="12,0,0,0" Command="{Binding Commands.NewDocumentCommand}" ToolTip="New file (Ctrl+N)"                                
                                fa:Awesome.Content="PlusCircle"                             
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                                />

                        <Button Name ="ToolButtonSaveFile" Margin="7,0" Command="{Binding Commands.SaveCommand}" 
								ToolTip="Save active document (Ctrl+S)"       
                                IsEnabled="{Binding ActiveDocument.IsDirty}"
                                fa:Awesome.Content="CheckCircleOutline" 
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                                />

					</ToolBar>



                    <ToolBar FontWeight="Light" Name="ToolbarEdit" FontSize="17">
                        <Button Name="ButtonBold" Margin="7,0"  ToolTip="Bold (Ctrl+B)"                                   
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="bold"                                
                                fa:Awesome.Content="Bold"
                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" />

                        <Button Name ="ButtonItalic" Margin="7,0" ToolTip="Italic (Ctrl+I)" 
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="italic"
                                fa:Awesome.Content="Italic" 
                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" />

                        <Button Name ="ButtonStrikeThrough" Margin="7,0" ToolTip="Strikethrough" 
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="strikethrough"
                                fa:Awesome.Content="Strikethrough"                                 
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" />

                        <Button Name ="ButtonInlineCode" Margin="5,-4,7,0"
								ToolTip="Inline code inside of a paragraph (Ctrl+`)" 
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="inlinecode"  
                                FontWeight="Medium"  
								TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"
                        >`{ }`</Button>
                        
                        <Separator />

                        <Button Name="ButtonQuote" Margin="7,0" ToolTip="Quote text (Ctrl+Q)"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }"  
                                CommandParameter="quote"
                                fa:Awesome.Content="QuoteLeft"
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"                                 
                                />

                        <Button Name ="ButtonList" Margin="7,0" ToolTip="turns lines into an unordered list (Ctrl+L)"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="list"
                                fa:Awesome.Content="ListUl"                                                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"                                 
                                />

                        <Button Name ="ButtonNumberList" Margin="7,0" ToolTip="Turns lines to ordered list"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="numberlist"
                                fa:Awesome.Content="ListOl"								                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"                                 
                                />

                        <Button Name ="ButtonTableEditor" Margin="7,0" ToolTip="Opens the interactive table editor"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="table"
                                fa:Awesome.Content="Table"								                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"                                 
                        />

                        <Separator />

                        <Button Name ="ButtonH1" Margin="3,0" ToolTip="H1 Text"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="h1" Content="H1" FontWeight="Bold"                                
                                />

                        <Button Name ="ButtonH2" Margin="3,0" ToolTip="H2 Text"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="h2" Content="H2" FontWeight="Bold"                                
                                />

                        <Button Name ="ButtonH3" Margin="3,0" ToolTip="H3 Text"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="h3" Content="H3" FontWeight="Bold"                                
                                />
                        <Button Name ="ButtonH4" Margin="3,0" ToolTip="H4 Text"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="h4" Content="H4" FontWeight="Bold"                                
                                />
                        <Button Name ="ButtonH5" Margin="3,0" ToolTip="H5 Text"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="h5" Content="H5" FontWeight="Bold"                                
                                />
                        <Separator />


                        <Button Name ="ButtonLink" Margin="7,0" ToolTip="Insert link (Ctrl+K)"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="href" 
                                fa:Awesome.Content="ExternalLink"
                                 
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                                />
                        <Button Name ="ButtonImage" Margin="7,0"                              
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="image"                                
                                fa:Awesome.Content="Image"
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                                >
                            <Button.ToolTip>
                                <ToolTip>
                                    <TextBlock>Insert an image from disk or the clipboard (Alt+I).
                                        <LineBreak/>
                                        You can also paste images from the clipboard into the document.
                                    </TextBlock>
                                </ToolTip>
                            </Button.ToolTip>
                        </Button>

                        <Button Name ="ButtonCode"  
								ToolTip="Insert a formatted source code snippet (Alt+C)"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="code"                                
                                FontWeight="Medium" 
								Width="27" Margin="0,0,0,0"
                        >{#}</Button>

						<Button Name="ButtonEmoji" Margin="7,0,0,0" 
								ToolTip="Insert emoji (Ctrl+J)"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="emoji"
                                fa:Awesome.Content="SmileOutline"                                                           
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"                                 
                        />

                        <Button Name="ButtonMoreMarkdown" Margin="7,0" ToolTip="More Markup Operations" 
                                fa:Awesome.Content="CaretDown"                                                      
                        >
                            <i:Interaction.Behaviors>
                                <local:DropDownButtonBehavior />
                            </i:Interaction.Behaviors>
                            <Button.ContextMenu>
                                <ContextMenu>
                                    <MenuItem ToolTip="Make text small" 
                                              Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                              CommandParameter="small">
                                        <MenuItem.Header>
                                            <StackPanel Orientation="Horizontal">
                                                <fa:ImageAwesome Icon="ArrowDown" Foreground="Silver" Height="16" Width="16" Margin="0,0,10,0"  />
                                                <TextBlock>Small</TextBlock>
                                            </StackPanel>
                                        </MenuItem.Header>
                                    </MenuItem>

                                    <MenuItem ToolTip="Underline selected text" 
                                            Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                            CommandParameter="underline">
                                        <MenuItem.Header>
                                            <StackPanel Orientation="Horizontal" >
                                                <fa:ImageAwesome Icon="Underline" Foreground="Silver" Height="16" Width="16" Margin="0,0,10,0" />
                                                <TextBlock>Underline</TextBlock>
                                            </StackPanel>
                                        </MenuItem.Header>
                                    </MenuItem>


                                    <MenuItem ToolTip="Mark text with highlight."
                                              Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                              CommandParameter="mark" FontWeight="Light">
                                        <MenuItem.Header>
                                            <StackPanel Orientation="Horizontal" >
                                                <fa:ImageAwesome Icon="Pencil" Foreground="Silver" Height="16" Width="16" Margin="0,0,10,0" />
                                                <TextBlock>Mark Text</TextBlock>

                                            </StackPanel>
                                        </MenuItem.Header>
                                    </MenuItem>
                                    <Separator/>
                                    <MenuItem ToolTip="Add a page break for printing" 
                                              Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                              CommandParameter="pagebreak">
                                        <MenuItem.Header>
                                            <StackPanel Orientation="Horizontal">
                                                <fa:ImageAwesome Icon="Paragraph" Foreground="Silver" Height="16" Width="16" Margin="0,0,10,0"  />
                                                <TextBlock>Pagebreak</TextBlock>
                                            </StackPanel>
                                        </MenuItem.Header>
                                    </MenuItem>
                                    
                                    


                                </ContextMenu>
                            </Button.ContextMenu>
                        </Button>

                    </ToolBar>

                    <ToolBar x:Name="ToolBarPreviewView">
                        <ToggleButton x:Name="TogglebuttonDisableScriptAutorun"
                                      Focusable="False"
                                      IsChecked="{Binding IsAutorefreshScriptsDisabled}"
                                      ToolTip="Disable or Enable autmatic script refresh.">
                            <Viewbox Height="19" Stretch="Uniform">
                                <Canvas Width="32" Height="32">
                                    <Canvas>
                                        <Canvas.RenderTransform>
                                            <TranslateTransform X="0" Y="-265" />
                                        </Canvas.RenderTransform>
                                        <Canvas>
                                            <Canvas.RenderTransform>
                                                <MatrixTransform Matrix="1.5307682 0 0 1.5307682 -8.8431782 -150.15861" />
                                            </Canvas.RenderTransform>
                                            <Path Stroke="{DynamicResource BlackBrush}"
                                                  StrokeEndLineCap="Flat"
                                                  StrokeLineJoin="Miter"
                                                  StrokeMiterLimit="4"
                                                  StrokeStartLineCap="Flat"
                                                  StrokeThickness="2">
                                                <Path.Data>
                                                    <PathGeometry Figures="m 10.583333 287.73958 v -11.90625 c 0 -1.32291 1.322917 -2.64583 2.645834 -2.64583 h 9.260416 c 1.322917 0 2.645834 1.32292 2.645833 2.64583 v 1.32292 h -3.96875 -1.322916" FillRule="NonZero" />
                                                </Path.Data>
                                            </Path>
                                            <Path Stroke="{DynamicResource BlackBrush}"
                                                  StrokeEndLineCap="Flat"
                                                  StrokeLineJoin="Miter"
                                                  StrokeMiterLimit="4"
                                                  StrokeStartLineCap="Flat"
                                                  StrokeThickness="2">
                                                <Path.Data>
                                                    <PathGeometry Figures="m 22.489583 273.1875 c -1.322916 0 -2.645833 1.32292 -2.645833 3.96875 v 10.58333 c 0 3.43959 -3.96875 3.43959 -3.96875 0 H 7.9374999 c 1e-7 1.32292 1e-7 2.64584 2.6458331 2.64584 h 7.408334" FillRule="NonZero" />
                                                </Path.Data>
                                            </Path>
                                            <Canvas Opacity="1">
                                                <Canvas.RenderTransform>
                                                    <ScaleTransform ScaleX="0.77458224" ScaleY="1.2910185" />
                                                </Canvas.RenderTransform>
                                                <Path Fill="{DynamicResource BlackBrush}"
                                                      Stroke="{DynamicResource BlackBrush}"
                                                      StrokeMiterLimit="4"
                                                      StrokeThickness="0">
                                                    <Path.Data>
                                                        <PathGeometry Figures="m 18.549664 215.73643 v 2.97005 q 0 0.61243 -0.456316 1.06074 -0.456315 0.44831 -1.088751 0.44831 -0.380263 0 -0.748517 -0.17212 -0.364252 -0.17612 -0.79655 -0.5724 v -1.24085 q 0 -0.12009 0.04803 -0.17212 0.04803 -0.052 0.120083 -0.052 0.07605 0 0.124085 0.052 0.04803 0.052 0.04803 0.17212 l -0.004 1.08074 q 0.308213 0.2842 0.60842 0.4283 0.30421 0.14009 0.600415 0.14009 0.328226 0 0.620428 -0.16011 0.220152 -0.12008 0.400276 -0.40428 0.184128 -0.28419 0.184128 -0.60842 v -2.97005 h -1.31691 q -0.124086 0 -0.176121 -0.044 -0.05204 -0.048 -0.05204 -0.12408 0 -0.0761 0.05204 -0.12009 0.05204 -0.048 0.176121 -0.048 h 2.457697 q 0.120083 0 0.172119 0.048 0.05204 0.044 0.05204 0.12009 0 0.0761 -0.05204 0.12408 -0.05204 0.044 -0.172119 0.044 z" FillRule="NonZero" />
                                                    </Path.Data>
                                                </Path>
                                                <Path Fill="{DynamicResource BlackBrush}"
                                                      Stroke="{DynamicResource BlackBrush}"
                                                      StrokeMiterLimit="4"
                                                      StrokeThickness="0">
                                                    <Path.Data>
                                                        <PathGeometry Figures="m 23.352981 215.73643 v -0.11207 q 0 -0.12009 0.04403 -0.17212 0.04803 -0.052 0.124086 -0.052 0.07605 0 0.120083 0.052 0.04803 0.052 0.04803 0.17212 v 0.85659 q 0 0.12008 -0.04803 0.17212 -0.04403 0.052 -0.120083 0.052 -0.07205 0 -0.120083 -0.048 -0.04403 -0.048 -0.04803 -0.15611 -0.02001 -0.33623 -0.34824 -0.60442 -0.324224 -0.26818 -0.852589 -0.26818 -0.556385 0 -0.884611 0.2882 -0.328227 0.28419 -0.328227 0.67246 0 0.20014 0.09206 0.36425 0.09206 0.16412 0.244168 0.26819 0.152105 0.10007 0.344238 0.16411 0.192133 0.06 0.600415 0.12809 0.684472 0.11208 0.944652 0.22816 0.348241 0.15611 0.524362 0.4323 0.180125 0.27619 0.180125 0.65245 0 0.5764 -0.460318 0.98468 -0.460318 0.40428 -1.240857 0.40428 -0.876606 0 -1.400968 -0.54838 v 0.19213 q 0 0.12008 -0.04803 0.17212 -0.04403 0.052 -0.120083 0.052 -0.07205 0 -0.120083 -0.052 -0.04803 -0.052 -0.04803 -0.17212 v -0.92864 q 0 -0.12409 0.04403 -0.17612 0.04803 -0.052 0.124086 -0.052 0.07205 0 0.11608 0.048 0.04803 0.048 0.05204 0.15611 0.02001 0.36826 0.392271 0.67247 0.37626 0.3002 1.008697 0.3002 0.632437 0 0.996688 -0.31621 0.368254 -0.31622 0.368254 -0.74852 0 -0.26418 -0.140096 -0.46832 -0.140097 -0.20815 -0.416288 -0.32823 -0.192133 -0.0841 -0.800553 -0.18813 -0.836577 -0.1401 -1.204832 -0.4283 -0.368254 -0.2882 -0.368254 -0.82056 0 -0.52837 0.42029 -0.90863 0.424293 -0.38026 1.116771 -0.38026 0.704487 0 1.212838 0.4443 z" FillRule="NonZero" />
                                                    </Path.Data>
                                                </Path>
                                            </Canvas>
                                        </Canvas>
                                        <Path Fill="{DynamicResource WhiteBrush}"
                                              Opacity="1"
                                              Stroke="{DynamicResource BlackBrush}"
                                              StrokeEndLineCap="Round"
                                              StrokeMiterLimit="4"
                                              StrokeStartLineCap="Round"
                                              StrokeThickness="4">
                                            <Path.Data>
                                                <PathGeometry Figures="m -19.164832 289.85623 a 5.7060022 5.7060022 0 0 1 -5.706002 5.706 5.7060022 5.7060022 0 0 1 -5.706003 -5.706 5.7060022 5.7060022 0 0 1 5.706003 -5.706 5.7060022 5.7060022 0 0 1 5.706002 5.706 z" FillRule="NonZero" />
                                            </Path.Data>
                                            <Path.RenderTransform>
                                                <ScaleTransform ScaleX="-1" ScaleY="1" />
                                            </Path.RenderTransform>
                                        </Path>
                                        <Canvas Name="g850">
                                            <Canvas.RenderTransform>
                                                <MatrixTransform Matrix="-2.0000001 0 0 2.0000001 75.14167 -293.56045" />
                                            </Canvas.RenderTransform>
                                            <Path Stroke="{DynamicResource BlackBrush}"
                                                  StrokeEndLineCap="Flat"
                                                  StrokeLineJoin="Miter"
                                                  StrokeMiterLimit="4"
                                                  StrokeStartLineCap="Flat"
                                                  StrokeThickness="2">
                                                <Path.Data>
                                                    <PathGeometry Figures="M 26.458333 293.03125 23.8125 290.38542" FillRule="NonZero" />
                                                </Path.Data>
                                            </Path>
                                            <Path Stroke="{DynamicResource BlackBrush}"
                                                  StrokeEndLineCap="Flat"
                                                  StrokeLineJoin="Miter"
                                                  StrokeMiterLimit="4"
                                                  StrokeStartLineCap="Flat"
                                                  StrokeThickness="2">
                                                <Path.Data>
                                                    <PathGeometry Figures="m 23.8125 293.03125 2.645833 -2.64583" FillRule="NonZero" />
                                                </Path.Data>
                                            </Path>
                                        </Canvas>
                                    </Canvas>
                                </Canvas>
                            </Viewbox>
                        </ToggleButton>

                        <Button x:Name="ButtonUpdatePreview"
                                Margin="7,0,0,0"
                                Command="{Binding Commands.RefreshPreviewCommand}"
                                Focusable="False"
                                ToolTip="Update the Preview">
                            <fa:FontAwesome FontSize="17" Icon="Refresh" />
                        </Button>

                    </ToolBar>

                    <ToolBar Name="ToolbarAddIns"
                             FontSize="17"
                             Visibility="Hidden">
                        <Button Name="ButtonGit"
                                Command="{Binding Commands.Git.CommitToGitCommand}"
                                ToolTip="Git Operations: Commit, Push, Pull, Clone, Create (Alt+G)">
                            <Image Height="19"
                                   Margin="0,0,2,0"
                                   Source="assets/git.png" />
                        </Button>

                    </ToolBar>

                </StackPanel>
            </ToolBarPanel>
        </StackPanel>


        

        <Grid Name="ContentGrid" Grid.Row="2" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Name="LeftSidebarColumn"  Width="{Binding WindowLayout.LeftSidebarWidth,Mode=TwoWay}" x:FieldModifier="public" />
                <ColumnDefinition Name="LeftSidebarSeparatorColumn" Width="{Binding WindowLayout.LeftSidebarSeparatorWidth,Mode=TwoWay}"  x:FieldModifier="public" />
                <ColumnDefinition Name="MainWindowEditorColumn" Width="*" x:FieldModifier="public" />
                <ColumnDefinition Name="RightSidebarSeparatorColumn" Width="{Binding WindowLayout.RightSidebarSeparatorWidth,Mode=TwoWay}"  x:FieldModifier="public" />
                <ColumnDefinition Name="RightSidebarColumn" Width="{Binding WindowLayout.RightSidebarWidth,Mode=TwoWay}"  x:FieldModifier="public" />
            </Grid.ColumnDefinitions>

            <controls:MetroTabControl x:Name="SidebarContainer"
                                        Margin="0,5,0,0"                                        
                                        FontSize="13" 
                                        x:FieldModifier="public"                                                                                                                                                         
                                        TabStripPlacement="Left"                                        
                                        SelectionChanged="SidebarContainer_SelectionChanged"
                                        BorderThickness="0">
                <TabControl.Resources>
                    <Style TargetType="controls:MetroTabItem">
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="false">
                                <Setter Property="Opacity" Value="0.4" />
                            </Trigger>
                            <!--<Trigger Property="IsSelected" Value="true">
                                <Setter Property="FontWeight" Value="SemiBold" />
                            </Trigger>-->
                        </Style.Triggers>
                        <Style.Setters>
                            <Setter Property="Padding" Value="6,10" />
                        </Style.Setters>
                    </Style>
                </TabControl.Resources>

                <controls:MetroTabItem Name="TabFolderBrowser"  x:FieldModifier="public"
                          Visibility="Visible">
                    <TabItem.Header>
                        <StackPanel Margin="0,17,0,8">
                            <fa:FontAwesome Icon="Folder" FontSize="22"  Foreground="DarkGoldenrod" 
                                            ToolTip="File and Folder Browser"/>
                        </StackPanel>
                    </TabItem.Header>
                    <localwindows:FolderBrowerSidebar x:Name="FolderBrowser" x:FieldModifier="public">
                    </localwindows:FolderBrowerSidebar>
                </controls:MetroTabItem>


                <controls:MetroTabItem Name="TabDocumentOutline"  x:FieldModifier="public"                                       
                                       controls:VisibilityHelper.IsVisible="{Binding Configuration.IsDocumentOutlineVisible}" >
                    <TabItem.Header>
                        <StackPanel Margin="0,5,0,5">
                            <fa:FontAwesome Icon="Bookmark" FontSize="22" Foreground="SteelBlue"  
                                            ToolTip="Document Outline"/>
                        </StackPanel>
                    </TabItem.Header>
                    <localwindows:DocumentOutlineSidebarControl x:Name="DocumentOutline">
                    </localwindows:DocumentOutlineSidebarControl>
                </controls:MetroTabItem>

            </controls:MetroTabControl>


            <GridSplitter Grid.Column="1"                               
			              HorizontalAlignment="Center"                          
			              BorderThickness="0" IsTabStop="False"                          
			              VerticalAlignment="Stretch" >
                <GridSplitter.Template>
                    <ControlTemplate TargetType="{x:Type GridSplitter}">
                        <Grid Background="Transparent">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <fa:FontAwesome Icon="bars" Foreground="{DynamicResource BlueItem}"  Width="15" 
                                    controls:VisibilityHelper.IsCollapsed="{Binding WindowLayout.IsLeftSidebarVisible}"
                                    HorizontalAlignment="Center" Grid.Column="0" Padding="2,15,0,15" Cursor="Arrow" 
                                    MouseDown="LeftSidebarExpand_MouseDown"
                            />
                            <Image Source="Assets/vsizegrip.png" Height="30" Margin="1,0,1,0" VerticalAlignment="Center" Grid.Row="1"/>
                        </Grid>
                    </ControlTemplate>
                </GridSplitter.Template>
            </GridSplitter>

            <dragablz:TabablzControl x:Name="TabControl" x:FieldModifier="public" Grid.Column="2"
                                     Margin="0,5,2,0"
                                     FontSize="13"
                                     Background="Transparent"
                                     BorderThickness="0"
                                     ShowDefaultCloseButton="True"                                     
                                     ShowDefaultAddButton="False"
                                     SelectionChanged="TabControl_SelectionChanged"
                                     ContextMenuOpening="TabControl_ContextMenuOpening"
                                     PreviewMouseLeftButtonUp="TabControl_OnPreviewMouseLeftButtonUp"                                     
                                     controls:VisibilityHelper.IsVisible="{Binding IsTabOpen}">
                <TabControl.ContextMenu>
                    <ContextMenu>
                        <MenuItem/>
                    </ContextMenu>
                </TabControl.ContextMenu>
            </dragablz:TabablzControl>

            <mmcontrols:StartMenuUserControl Grid.Column="2"  controls:VisibilityHelper.IsCollapsed="{Binding IsTabOpen}" />

            <GridSplitter Grid.Column="3"  x:Name="RightSidebarContainerSeparator"                                                                   
                          HorizontalAlignment="Center"                          
                          BorderThickness="0" IsTabStop="False"
                          VerticalAlignment="Stretch">
                <GridSplitter.Template>
                    <ControlTemplate TargetType="{x:Type GridSplitter}">
                        <Grid Background="Transparent">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <fa:FontAwesome Icon="bars" Foreground="{DynamicResource BlueItem}"  Width="15" 
                                            controls:VisibilityHelper.IsCollapsed="{Binding WindowLayout.IsRightSidebarVisible}"
                                            HorizontalAlignment="Center" Grid.Column="0" Padding="0,15,5,15" Cursor="Arrow" 
                                            MouseDown="RightSidebarExpand_MouseDown"
                            />
                            <Image Source="Assets/vsizegrip.png" Height="30" Margin="1,0,1,0" VerticalAlignment="Center" Grid.Row="1" />
                        </Grid>
                    </ControlTemplate>
                </GridSplitter.Template>
            </GridSplitter>

    
            <controls:MetroTabControl Grid.Column="4" x:Name="RightSidebarContainer"
                                      Margin="0,5,0,0"
                                      FontSize="13"  x:FieldModifier="public"                                      
                                      TabStripPlacement="Bottom"
                                      BorderThickness="0">
                <TabControl.Resources>
                    <Style TargetType="controls:MetroTabItem">
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="false">
                                <Setter Property="Opacity" Value="0.4" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="FontWeight" Value="SemiBold" />
                            </Trigger>
                        </Style.Triggers>
                        <Style.Setters>
                            <Setter Property="Padding" Value="3,2,9,10" />
                            <Setter Property="Margin" Value="0,0,4,4" />
                            <Setter Property="controls:ControlsHelper.HeaderFontSize" Value="14" />
                        </Style.Setters>
                    </Style>
                </TabControl.Resources>
                
            </controls:MetroTabControl>
        </Grid>



        <GridSplitter Height="7"  Grid.Row="3"    Background="#333"                          
                      VerticalAlignment="Center"                          
                      BorderThickness="0" IsTabStop="False"                          
                      controls:VisibilityHelper.IsCollapsed="{Binding WindowLayout.IsConsolePanelVisible, Converter={StaticResource InvertedBooleanConverter}}"
                      HorizontalAlignment="Stretch" >
        </GridSplitter>


        <mmcontrols:ConsolePanelControl 
            Grid.Row="4" x:Name="ConsolePanel" 
            Height="Auto"
            controls:VisibilityHelper.IsCollapsed="{Binding WindowLayout.IsConsolePanelVisible, Converter={StaticResource InvertedBooleanConverter}}" />


        <StatusBar  Grid.Row ="5"  Margin="0,0,0,0" VerticalAlignment="Bottom" 
                    HorizontalAlignment="Stretch">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" MinWidth="100" />
                            <ColumnDefinition Width="4"  />
                            <ColumnDefinition Width="Auto"  />
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <!-- Markdown Parser column, width = 150 -->
                            <ColumnDefinition Width="{Binding MarkdownParserColumnWidth}"/>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem Grid.Column="0" Margin="2,1,0,0">
                <fa:FontAwesome Name="StatusIcon" Icon="Circle" Foreground="Green"/>
            </StatusBarItem>
            <StatusBarItem Grid.Column="1">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Name="StatusText" x:FieldModifier="public" HorizontalAlignment="Left">Ready</TextBlock>
                </StackPanel>
            </StatusBarItem>
            <Separator Grid.Column="2" />


            <StatusBarItem Grid.Column="3">
                <TextBlock  Name="StatusStats" x:FieldModifier="public" Margin="0,2,0,0"
                            HorizontalAlignment="Left"></TextBlock>
            </StatusBarItem>

            <StatusBarItem  Grid.Column="4" >
                <ComboBox Name="StatusZoomLevel"
                          Background="Transparent" BorderBrush="Transparent" BorderThickness="0"
                          IsEditable="True" FontSize="13"  Padding="1" 
                          IsSynchronizedWithCurrentItem="True"
                          MouseDoubleClick="StatusZoomLevel_MouseDoubleClick"  
                          SelectionChanged="StatusZoomLevel_SelectionChanged"
                          PreviewTextInput="StatusZoomLevel_PreviewTextInput"  
                          ItemStringFormat="0\\%"
                          Text="{Binding Configuration.Editor.ZoomLevel,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,StringFormat='0\\%'}">
                    <ComboBox.ToolTip>
                        <TextBlock>
                            Editor font size zoom level.
                            <LineBreak /> 
                            Also use the mouse wheel or Ctrl++ and Ctrl+- to zoom.
                            <LineBreak />
                            Double click to reset to 100%.
                        </TextBlock>
                    </ComboBox.ToolTip>
                    <ComboBoxItem>50</ComboBoxItem>
                    <ComboBoxItem>75</ComboBoxItem>
                    <ComboBoxItem>100</ComboBoxItem>
                    <ComboBoxItem>125</ComboBoxItem>
                    <ComboBoxItem>150</ComboBoxItem>
                    <ComboBoxItem>200</ComboBoxItem>
                </ComboBox>
            </StatusBarItem>
       
          
            <StatusBarItem Grid.Column="5">
                <ComboBox  Name="StatusEncoding" x:FieldModifier="public"
                           HorizontalAlignment="Right"  Width="130" ToolTip="Document Encoding"  
                           FontSize="13" Padding="2,1"
                           IsSynchronizedWithCurrentItem="True" Margin="0,0,3,0"    
                           ItemsSource="{Binding EncodingTypes}"
                           SelectionChanged="StatusEncoding_SelectionChanged"
                           Background="Transparent" BorderBrush="Transparent" BorderThickness="0"                           
                />

                <!--<TextBlock  Name="StatusEncoding" x:FieldModifier="public" HorizontalAlignment="Left"
                            ToolTip="Document Encoding"></TextBlock>-->
            </StatusBarItem>

            <StatusBarItem Grid.Column="6" Margin="6,0,0,0">
                <ComboBox   Name="DocumentType" x:FieldModifier="public" HorizontalAlignment="Left"
                            Width="100"  FontSize="13"  Padding="3,1"
                            ItemsSource="{Binding DocumentTypes}"
                            SelectedItem="{Binding ActiveEditor.EditorSyntax, Mode=TwoWay}"                             
                            ToolTip="Editor Code Syntax" 
                            Background="Transparent" BorderBrush="Transparent" BorderThickness="0"
                            SelectionChanged="DocumentType_SelectionChanged"
                            />
            </StatusBarItem>


            <StatusBarItem Grid.Column="7">
                <ComboBox  HorizontalAlignment="Right"  
                           ToolTip="Registered Markdown Parsers" Width="{Binding MarkdownParserColumnWidth}"
                           SelectedItem="{Binding Configuration.MarkdownOptions.MarkdownParserName}" 
                           IsSynchronizedWithCurrentItem="True"   FontSize="13"  Padding="3,1"
                           ItemsSource="{Binding MarkdownParserNames}"
                           Background="Transparent" BorderBrush="Transparent" BorderThickness="0"
                           SelectionChanged="MarkdownParserName_SelectionChanged" />

            </StatusBarItem>
            
            <StatusBarItem Grid.Column="9">

                <ComboBox  HorizontalAlignment="Right"  ToolTip="Editor Themes"
                           SelectedItem="{Binding Configuration.EditorTheme}"  FontSize="13" Padding="3,1"
                           IsSynchronizedWithCurrentItem="True"                            
                           ItemsSource="{Binding EditorThemeNames}"
                           Background="Transparent" BorderBrush="Transparent" BorderThickness="0"
                           SelectionChanged="EditorTheme_SelectionChanged" />
            </StatusBarItem>
            <StatusBarItem Grid.Column="10">
                <ComboBox  HorizontalAlignment="Right" Padding="3,1"
                           ToolTip="Preview rendering Themes"  FontSize="13"
                           SelectedItem="{Binding Configuration.PreviewTheme}" 
                           IsSynchronizedWithCurrentItem="True" 
                           ItemsSource="{Binding PreviewThemeNames}"
                           Background="Transparent" BorderBrush="Transparent" BorderThickness="0"
                           SelectionChanged="PreviewTheme_SelectionChanged" />

            </StatusBarItem>
            <StatusBarItem Grid.Column="11">
                <ComboBox  HorizontalAlignment="Right"   Width="18" ToolTip="Preview sync mode"  
                           Name="ComboBoxPreviewSyncModes"  FontSize="13" Padding="0,1"
                           IsSynchronizedWithCurrentItem="True" Margin="0,0,3,0"    
                           SelectedValue="{Binding Configuration.PreviewSyncMode}" 
                           ItemsSource="{Binding PreviewSyncModeItems}"                           
                           DisplayMemberPath="IconString"
                           SelectedValuePath="Value" 
                           FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"
                           Background="Transparent" BorderBrush="Transparent" BorderThickness="0"
                           SelectionChanged="PreviewTheme_SelectionChanged">
                </ComboBox>
            </StatusBarItem>

            <StatusBarItem Grid.Column="12">
                <Button Name="ButtonStatusEncrypted" Margin="0,0,15,0" Click="Button_Handler" 
                    ToolTip="Encrypted"
                    fa:Awesome.Content="Lock" 
                    Visibility="{Binding ActiveDocument.IsEncrypted, Converter={StaticResource BooleanToVisibilityConverter}}"
                    BorderThickness="0"                     
                    TextElement.FontSize="12"
                    TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" />
            </StatusBarItem>

        </StatusBar>
    </Grid>
</controls:MetroWindow>
